import java.util.Random;
import java.util.Scanner;


public class BlackJack {
    public static void main(String[] args) {
        //Initializing variables
        Scanner sc = new Scanner(System.in);
        Random randomGenerator = new Random();
        int computerScore = 0, humanScore = 0, humanRerolls = 0;
        boolean keepPlaying = true;

        // Let's first greet the user and establish the rules of the game
        // But! Showing just some text isn't very cool. Let's do a throwback to one of the first labs with an ascii art logo!
        // This ASCII art specifically was generated by http://www.network-science.de/ascii/. The settings are:
        // Font: banner   Reflection: no   Adjustment: left   Stretch: no      Width: 80	 Text: Team 19s Dice Game
        // Note: 80 is the default window width for PowerShell, which is why that number is chosen.
        System.out.println("#######                            #    #####         ");
        System.out.println("   #    ######   ##   #    #      ##   #     #  #### ");
        System.out.println("   #    #       #  #  ##  ##     # #   #     # #      ");
        System.out.println("   #    #####  #    # # ## #       #    ######  ####  ");
        System.out.println("   #    #      ###### #    #       #         #      # ");
        System.out.println("   #    #      #    # #    #       #   #     # #    # ");
        System.out.println("   #    ###### #    # #    #     #####  #####   ####  ");
        System.out.println("");
        System.out.println("######                      #####                       ");
        System.out.println("#     # #  ####  ######    #     #   ##   #    # ###### ");
        System.out.println("#     # # #    # #         #        #  #  ##  ## #  ");
        System.out.println("#     # # #      #####     #  #### #    # # ## # #####  ");
        System.out.println("#     # # #      #         #     # ###### #    # #      ");
        System.out.println("#     # # #    # #         #     # #    # #    # #      ");
        System.out.println("######  #  ####  ######     #####  #    # #    # ###### ");
        System.out.println("Welcome to Team 19's Dice Game! ***REDUX***");

        //Neat! Now, let's check if the user wants to see the rules
        System.out.println("\nDo you want to view the rules? (y/n)");
        char seeRules = sc.next().toLowerCase().charAt(0);
        if(seeRules == 'y'){
          showRules();
        }

        //Now, here's the meat and potatoes of the code.
        //The entire program is wrapped in a while statement, keepPlaying will be set to false when the user no longer wants to play
        //This allows the user to play as many times as they like
        while (keepPlaying){
            computerScore = 0;
            humanScore = 0;
            humanRerolls = 0;
            int[] dieRolls = new int[2]; //this holds the last pair of die rolls
            int[] updatedScores = new int[2]; //this holds updated scores, modified by rules 1, 2, and 4

            //Initial roll of the die for the computer:
            dieRolls = rollDice(randomGenerator);
            computerScore += (2*(dieRolls[0] + dieRolls[1]));
            //print out the computer's current roll as ASCII
            printDice(dieRolls[0],dieRolls[1]);
            //check for rules 1 2 4
            updatedScores = checkRulesComputer(dieRolls[0], dieRolls[1], humanScore, computerScore);
            humanScore = updatedScores[0];
            computerScore = updatedScores[1];
            //check for Rule 3: if first roll is < 5, then score is doubled. I half the score here because I've already done the base doubling of the score per the gameplay rules.
            if((computerScore/2) < 5) {
            	computerScore *= 2;
            	System.out.println("Since computer rolled less than 5 on first roll, their score is doubled! (rule 3)");
            }
            System.out.println("The computer rolled "+dieRolls[0]+" and "+dieRolls[1]+" making their score "+computerScore);

            //Initial roll for the player
            dieRolls = rollDice(randomGenerator); // Comment this line out if debuging using line 90
            //dieRolls= new int[] {1,1}; //debug testing for rules by feeding in non-random dice rolls.
            humanScore += (2*(dieRolls[0] + dieRolls[1]));
            //print out the user's current roll as ASCII
            printDice(dieRolls[0],dieRolls[1]);
            //check for rules 1 2 4
            updatedScores = checkRulesPlayer(dieRolls[0], dieRolls[1], humanScore, computerScore, humanRerolls);
            humanScore = updatedScores[0];
            computerScore = updatedScores[1];
            //check for Rule 3: if first roll is < 5, then score is doubled
            if((humanScore/2) < 5) {
            	humanScore *= 2;
            	System.out.println("Since you rolled less than 5 on first roll, you score is doubled! (rule 3)");
            }
            System.out.println("You rolled "+dieRolls[0]+" and "+dieRolls[1]+" making your score "+humanScore);

            //Lets the user choose if they want to "hit" or "stand" (roll again or not roll, respectively)
            boolean continueRollingUser = true; //user rolls are done based on user choice
            while(continueRollingUser){
	            System.out.println("Would you like to roll again? (y/n)");
	            char rollChoice = sc.next().toLowerCase().charAt(0);
	            if(rollChoice == 'y') {
	            	//let's re-roll for the player now
	                dieRolls = rollDice(randomGenerator);
	                humanRerolls++;
	                humanScore += (2*(dieRolls[0] + dieRolls[1]));
	                //print out the User's current roll again, and state their score
	                printDice(dieRolls[0],dieRolls[1]);
	                //check for rules 1, 2, and 4
	                updatedScores = checkRulesPlayer(dieRolls[0], dieRolls[1], humanScore, computerScore, humanRerolls);
	                humanScore = updatedScores[0];
	                computerScore = updatedScores[1];
	                System.out.println("You rolled "+dieRolls[0]+" and "+dieRolls[1]+" making your score "+humanScore);
	            }
	            else { //assume a 'n' response for any non-y response and stops rolling
	            	continueRollingUser = false;
	            }
            }

            //now it's the computer's turn to start rolling
            boolean continueRollingComputer = true; //computer rolls if their score is < 17, as per the original rules of blackjack
            while(continueRollingComputer) {
            	if(computerScore < 17 && computerScore < humanScore && humanScore <= 21) { //The computer will roll only if its score is lower than the players and if the computer's score is less than 17.
            		//Roll the dice for the computer:
            		dieRolls = rollDice(randomGenerator);
                    computerScore += (2*(dieRolls[0] + dieRolls[1]));
                    printDice(dieRolls[0],dieRolls[1]);
                    //check for rules 1, 2, and 4
                    updatedScores = checkRulesComputer(dieRolls[0], dieRolls[1], humanScore, computerScore);
                    humanScore = updatedScores[0];
                    computerScore = updatedScores[1];
                    System.out.println("The computer rolled "+dieRolls[0]+" and "+dieRolls[1]+" making their score "+computerScore);
            	}
            	else {
            		continueRollingComputer = false;
            	}
            }

            //Here is all the win/lose/tie logic. These logic statements print tell the user who won, and what the final scores were
            if ( (computerScore>humanScore && computerScore<=21) || (humanScore > 21 && computerScore<=21)) {
                System.out.println("Sorry, you lost. Computer Score: " + computerScore +" Your score: " + humanScore);
            }
            else if ((computerScore == humanScore) || (computerScore>21 && humanScore>21)) {
                System.out.println("Tie game. Computer Score: " + computerScore + " Your Score: " +humanScore);
            }
            else {
                System.out.println("Congratulations, you won! Computer Score: " + computerScore + " Your Score: " +humanScore);
            }

            //ask if the user would like to play again
            System.out.println("Would you like to keep playing? (y/n)");
            boolean userDidNotGiveInput = true;
            while(userDidNotGiveInput) {
            	char playerChoice = sc.next().toLowerCase().charAt(0);
                if (playerChoice == 'y') {
                	keepPlaying = true;
                	userDidNotGiveInput = false;
                }
                else if (playerChoice == 'n') {
                	keepPlaying = false;
                	System.out.println("Thank you so much for playing Group 19's Redone Blackjack Dice Game! Hope you have a good day!");
                	userDidNotGiveInput = false;
                }
                else {
                	System.out.println("Please type either 'y' or 'n' and hit enter. Would you like to play again?");
                }
            }

        }

    }
    //Here are the rules that are printed if the user requests them on startup.
    public static void showRules(){

      System.out.println("\nNumber of players: 1! (You vs the Computer)");
      System.out.println("This game is a modified version of the card game Blackjack using dice instead of cards. The purpose of the game is to get closer to 21 than your opponent without going over.");
      System.out.println("The additional, student-generated rules of this game are as follows:");
      System.out.println("RULE 1: If the computer's score is 20, all your rolls are doubled.");
      System.out.println("RULE 2: If snake eyes is rolled, the result is doubled.");
      System.out.println("RULE 3: If the score the first roll is less than 5, then the score is doubled.");
      System.out.println("RULE 4: If the player gets over 21 on their first re-roll, then their score is halved.");
      System.out.println("\nNOTE 1: Per the standard rules of Blackjack, the dealer (in this case, the computer) stands on 17 and above inclusive.");
      System.out.println("NOTE 2: Per the original Group 19 Design Document Gameplay description, Line 2 (see DiceGameRulesTemplate (1).docx), all rolls are doubled by default, with additional multiplication stacking.");
      //Oh wow that's a lot of words! If I didn't do anything, the dice would start automatically rolling and add to this huge wall of text.
      //Let's not overwhelm the user and add a quick little cheat to pause the program until the user is done reading and hits Enter.
      System.out.println("\nPress Enter to Continue...");
      try{
        System.in.read();
      }
      catch(Exception e){}
    }

    //Checks Players rolls for student-generated rules 1, 2, and 4 regarding the score multiplication (regarding dice pairs like snakeeyes etc) and return an int[] of adjusted scores.
    //First element in array is PLAYER'S adjusted score, second is the COMPUTER'S adjusted score.

    public static int[] checkRulesPlayer(int roll1, int roll2, int playerScore, int computerScore, int rerolls) {
    	//Rule 1: if the computer's score is 20, your rolls are doubled:
    	if (computerScore == 20) {
    		playerScore += roll1 + roll2;
    		System.out.println("Player's roll is doubled as the computer is sitting at 20! (rule 1)");
    	}
    	//Rule 2: if snakeeyes are rolled (pre-base doubling), that roll is doubled
    	if( (roll1 == 1) && (roll2 == 1)) {
    		playerScore *= 2;
    		System.out.println("Player rolled snake eyes, this roll counts as doubled! (rule 2)");
    	}
    	//Rule 3 is implemented in the initial rolls in the main
    	//Rule 4: if player gets over 21 on their first reroll, then their score is halved
    	if((playerScore > 21) && (rerolls == 1)) {
    		playerScore /= 2;
    		System.out.println("Player busted on their first reroll, their score is halved! (rule 4)");
    	}
    	return new int[] {playerScore, computerScore};
    }

    //Checks Computer's rolls for student-generated rules 1, 2, and 4 regarding the score multiplication (regarding dice pairs like snakeeyes etc) and return an int[] of adjusted scores.
    //First element in array is PLAYER'S adjusted score, second is the COMPUTER'S adjusted score.
    public static int[] checkRulesComputer(int roll1, int roll2, int playerScore, int computerScore) {
    	//Rule 1 only applies to the player, not to the computer.
    	//Rule 2: if snakeeyes are rolled (pre-base doubling), that roll is doubled
    	if( (roll1 == 1) && (roll2 == 1)) {
    		computerScore *= 2;
    		System.out.println("Computer rolled snake eyes, this roll counts as doubled! (rule 2)");
    	}
    	//Rule 3 is implemented in the initial rolls in the main
    	//Rule 4 does not apply for computer rerolls, only to the user.
    	return new int[] {playerScore, computerScore};
    }

    //This method rolls the dice and returns a 1x2 int array when called.
    public static int[] rollDice(Random rng){
        int diceRoll1, diceRoll2;
        //Roll the dice!
        diceRoll1 = rng.nextInt(6)+1;
        diceRoll2 = rng.nextInt(6)+1;
        //That's usually more exciting with physical dice, but that worked too.
        //Let's bundle that up into an int array so I can return it whenever this method is called.
        return new int[]{diceRoll1,diceRoll2};
     }
    //Draw the ascii art
    public static void printDice(int diceRoll1, int diceRoll2){
        String[] diceLines = diceVisual(diceRoll1,diceRoll2);
        String firstLine =  "_______     _______";
        String secondLine = diceLines[0];
        String thirdLine =  diceLines[1];
        String fourthLine = diceLines[2];
        String fifthLine =  "-------     -------";
        System.out.println(firstLine);
        System.out.println(secondLine);
        System.out.println(thirdLine);
        System.out.println(fourthLine);
        System.out.println(fifthLine);
    }
    //convert the roll to ascii art
    public static String[] diceVisual(int diceRoll1, int diceRoll2){
            String secondLine, thirdLine, fourthLine;
            //This will print out a dice design for all six possible faces for Roll 1
            if(diceRoll1==1){
                secondLine = "|     |";
                thirdLine =  "|  0  |";
                fourthLine = "|     |";
            }else if(diceRoll1==2){
                secondLine = "|    0|";
                thirdLine =  "|     |";
                fourthLine = "|0    |";
            }else if(diceRoll1==3){
                secondLine = "|    0|";
                thirdLine =  "|  0  |";
                fourthLine = "|0    |";
            }else if(diceRoll1==4){
                secondLine = "|0   0|";
                thirdLine =  "|     |";
                fourthLine = "|0   0|";
            }else if(diceRoll1==5){
                secondLine = "|0   0|";
                thirdLine =  "|  0  |";
                fourthLine = "|0   0|";
            }else{
                secondLine = "|0   0|";
                thirdLine =  "|0   0|";
                fourthLine = "|0   0|";
            }
            //This will print out a dice design for all six possible faces for Roll 2
            if(diceRoll2==1){
                secondLine += "     |     |";
                thirdLine +=  "     |  0  |";
                fourthLine += "     |     |";
            }else if(diceRoll2==2){
                secondLine += "     |    0|";
                thirdLine +=  "     |     |";
                fourthLine += "     |0    |";
            }else if(diceRoll2==3){
                secondLine += "     |    0|";
                thirdLine +=  "     |  0  |";
                fourthLine += "     |0    |";
            }else if(diceRoll2==4){
                secondLine += "     |0   0|";
                thirdLine +=  "     |     |";
                fourthLine += "     |0   0|";
            }else if(diceRoll2==5){
                secondLine += "     |0   0|";
                thirdLine +=  "     |  0  |";
                fourthLine += "     |0   0|";
            }else{
                secondLine += "     |0   0|";
                thirdLine +=  "     |0   0|";
                fourthLine += "     |0   0|";
            }
            return new String[]{secondLine,thirdLine,fourthLine};
        }
    }
